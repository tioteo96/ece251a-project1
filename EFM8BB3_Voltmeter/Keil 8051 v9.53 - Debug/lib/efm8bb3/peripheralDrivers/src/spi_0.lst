C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI_0
OBJECT MODULE PLACED IN .\lib\efm8bb3\peripheralDrivers\src\spi_0.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\Device\EFM8BB3\peripheral_driver\src\spi_0.c OMF2 SMALL DEBUG OBJECTEXTEND
                    - ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users
                    -\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\graphics;C:\Users\student\SimplicityStudio\v4_workspace\EFM
                    -8BB3_Voltmeter\inc;C:\Users\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\config;C:/SiliconLabs/Simplicity
                    -Studio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kit
                    -s/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_dri
                    -ver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/SiliconLabs/
                    -SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/
                    -v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/devel
                    -oper/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/
                    -8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc)
                    - PRINT(.\lib\efm8bb3\peripheralDrivers\src\spi_0.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\efm8bb3\peripheral
                    -Drivers\src\spi_0.OBJ)

line level    source

   1          /******************************************************************************
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "efm8_config.h"
   8          #include "SI_EFM8BB3_Register_Enums.h"
   9          #include "spi_0.h"
  10          
  11          #if EFM8PDL_SPI0_AUTO_PAGE == 1
  12          // declare variable needed for autopage enter/exit
  13          #define DECL_PAGE uint8_t savedPage
  14          // enter autopage section
  15          #define SET_PAGE(p)     do                                                    \
  16                                  {                                                     \
  17                                    savedPage = SFRPAGE;  /* save current SFR page */   \
  18                                    SFRPAGE = (p);        /* set SFR page */            \
  19                                  } while(0)
  20          // exit autopage section
  21          #define RESTORE_PAGE(x) do                                                    \
  22                                  {                                                     \
  23                                    SFRPAGE = savedPage;  /* restore saved SFR page */  \
  24                                  } while(0)
  25          #else
              #define DECL_PAGE
              #define SET_PAGE(x)
              #define RESTORE_PAGE(x)
              #endif
  30          
  31          // SFR page used to access SPI registers
  32          #define SPI_SFR_PAGE 0x20
  33          
  34          // Runtime API
  35          
  36          // Flag to indicate if driver should control Nss (chip select)
  37          static bool useNss  = false;
  38          
  39          // flag to indicate we are in master mode (else slave)
  40          static bool modeIsMaster = false;
  41          
  42          // flag to indicate that init vars (above) are valid.  If they are
  43          // not valid then a special one-time init will be called to set them
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 2   

  44          static bool initIsValid = false;
  45          
  46          // ----------------------------------------------------------------------------
  47          // Initialize internal state variables.  This is used if init API is
  48          // not called.
  49          // ----------------------------------------------------------------------------
  50          static void SPI0_internalInit(void)
  51          {
  52   1        // figure out if we are master mode, and using 4-wire or not
  53   1        modeIsMaster = SPI0CFG & SPI0CFG_MSTEN__MASTER_ENABLED;
  54   1        useNss = SPI0CN0 & SPI0CN0_NSSMD__FMASK;
  55   1      
  56   1        // indicate that init has now been done
  57   1        initIsValid = true;
  58   1      }
  59          
  60          #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
  61          // ----------------------------------------------------------------------------
  62          // Get interrupt flags
  63          // ----------------------------------------------------------------------------
  64          uint8_t SPI0_getIntFlags(void)
  65          {
  66   1        uint8_t ret;
  67   1        DECL_PAGE;
  68   1        SET_PAGE(SPI_SFR_PAGE);
  69   1        ret = SPI0CN0 & 0xF0;
  70   1        RESTORE_PAGE();
  71   1        return ret;
  72   1      }
  73          
  74          // ----------------------------------------------------------------------------
  75          // Clear specific interrupt flags
  76          // ----------------------------------------------------------------------------
  77          void SPI0_clearIntFlags(uint8_t flags)
  78          {
  79   1        DECL_PAGE;
  80   1        SET_PAGE(SPI_SFR_PAGE);
  81   1        SPI0CN0 = (SPI0CN0 & (~flags | 0x0F));
  82   1        RESTORE_PAGE();
  83   1      }
  84          #endif
  85          
  86          // ----------------------------------------------------------------------------
  87          // Write a byte if transmit buffer is not full.
  88          // ----------------------------------------------------------------------------
  89          bool SPI0_writeByte(uint8_t value)
  90          {
  91   1        bool ret = false;
  92   1        DECL_PAGE;
  93   1      
  94   1        SET_PAGE(SPI_SFR_PAGE);
  95   1      
  96   1        // check to see if transmit buffer is not full
  97   1        if (SPI0CN0_TXNF)
  98   1        {
  99   2          SPI0DAT = value;
 100   2          ret = true;
 101   2        }
 102   1      
 103   1        RESTORE_PAGE();
 104   1        return ret;
 105   1      }
 106          
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 3   

 107          // ----------------------------------------------------------------------------
 108          // Write a byte, waiting for transmit buffer to be empty
 109          // ----------------------------------------------------------------------------
 110          void SPI0_pollWriteByte(uint8_t value)
 111          {
 112   1        DECL_PAGE;
 113   1      
 114   1        SET_PAGE(SPI_SFR_PAGE);
 115   1      
 116   1        // wait for TX empty
 117   1        while (!SPI0CN0_TXNF)
 118   1        {}
 119   1      
 120   1        SPI0DAT = value;
 121   1      
 122   1        RESTORE_PAGE();
 123   1      }
 124          
 125          #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
 126          // ----------------------------------------------------------------------------
 127          // Read a byte without checking status
 128          // ----------------------------------------------------------------------------
 129          extern uint8_t SPI0_readByte(void)
 130          {
 131   1        uint8_t ret;
 132   1        DECL_PAGE;
 133   1      
 134   1        SET_PAGE(SPI_SFR_PAGE);
 135   1        ret = SPI0DAT;
 136   1        RESTORE_PAGE();
 137   1        return ret;
 138   1      }
 139          #endif
 140          
 141          // ----------------------------------------------------------------------------
 142          // Read a byte, waiting for ther receive buffer to contain at least one byte.
 143          // ----------------------------------------------------------------------------
 144          uint8_t SPI0_pollReadByte(void)
 145          {
 146   1        uint8_t ret;
 147   1        DECL_PAGE;
 148   1      
 149   1        SET_PAGE(SPI_SFR_PAGE);
 150   1      
 151   1        // wait while RX is empty
 152   1        while (SPI0CFG & SPI0CFG_RXE__BMASK)
 153   1        {}
 154   1      
 155   1        ret = SPI0DAT;
 156   1        RESTORE_PAGE();
 157   1      
 158   1        return ret;
 159   1      }
 160          
 161          // ----------------------------------------------------------------------------
 162          // Perform a multi-byte transfer, waiting for each byte to complete.
 163          // ----------------------------------------------------------------------------
 164          uint8_t
 165          SPI0_pollTransfer(SI_VARIABLE_SEGMENT_POINTER(pTxBuffer, uint8_t,
 166                                                        EFM8PDL_SPI0_TX_SEGTYPE),
 167                            SI_VARIABLE_SEGMENT_POINTER(pRxBuffer, uint8_t,
 168                                                        EFM8PDL_SPI0_RX_SEGTYPE),
 169                            SPI0_TransferDirection_t dir,
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 4   

 170                            uint8_t xferCount)
 171          {
 172   1        uint8_t txCount = xferCount;
 173   1        bool checkNss = false;
 174   1        DECL_PAGE;
 175   1      
 176   1        SET_PAGE(SPI_SFR_PAGE);
 177   1      
 178   1        // This function is not interrupt driven and if SPI interrupts are
 179   1        // enabled, it can cause interference.
 180   1        SPI0_disableInt();
 181   1      
 182   1        // make sure SPI is not already busy
 183   1        while (SPI0CFG & SPI0CFG_SPIBSY__BMASK)
 184   1        {}
 185   1      
 186   1        // Check to see if run-time mode variables have been set up
 187   1        if (!initIsValid)
 188   1        {
 189   2          SPI0_internalInit();
 190   2        }
 191   1      
 192   1        // Flush the RX buffer in case something is in there
 193   1      #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
 194   1        {
 195   2          // if auto page is enabled then we dont need to change pages here
 196   2          SPI0FCN0 |= SPI0FCN0_RFLSH__FLUSH;
 197   2        }
 198   1      #else
                {
                  // if auto page is not enabled, then we need to change pages for
                  // this section of code
                  uint8_t savedPage = SFRPAGE;
                  SFRPAGE = SPI_SFR_PAGE;
                  SPI0FCN0 |= SPI0FCN0_RFLSH__FLUSH;
                  SFRPAGE = savedPage;
                }
              #endif
 208   1      
 209   1        // assert NSS (if used)
 210   1        if (modeIsMaster && useNss)
 211   1        {
 212   2          SPI0CN0_NSSMD0 = 0;
 213   2        }
 214   1      
 215   1        // Wait in loop until the requested number of transfers are complete
 216   1        // Note: xferCount tracks the number of bytes received
 217   1        while (xferCount)
 218   1        {
 219   2          // If the transmit buffer is empty and there are still bytes to
 220   2          // write, then write a byte out
 221   2          if (SPI0CN0_TXNF && txCount)
 222   2          {
 223   3            // If user provided a write buffer then use that
 224   3            if (dir & SPI0_TRANSFER_TX)
 225   3            {
 226   4              SPI0DAT = *pTxBuffer;
 227   4              ++pTxBuffer;
 228   4            }
 229   3      
 230   3            // else user did not provide write buffer so just use zeroes
 231   3            else
 232   3            {
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 5   

 233   4              SPI0DAT = 0;
 234   4            }
 235   3      
 236   3            --txCount;
 237   3          }
 238   2      
 239   2          // If the receive buffer is not empty and there are more bytes to read
 240   2          if (!(SPI0CFG & SPI0CFG_RXE__BMASK) && xferCount)
 241   2          {
 242   3            // If user provided RX buffer, then read byte into buffer
 243   3            if (dir & SPI0_TRANSFER_RX)
 244   3            {
 245   4              *pRxBuffer = SPI0DAT;
 246   4              ++pRxBuffer;
 247   4            }
 248   3      
 249   3            // else there is no RX buffer so just throw away the incoming byte
 250   3            else
 251   3            {
 252   4              uint8_t dummy = SPI0DAT;
 253   4            }
 254   3      
 255   3            --xferCount;
 256   3          }
 257   2      
 258   2          // If we are in slave mode and 4-wire, then check to make sure
 259   2          // slave is selected.  If not it means the spi master stopped
 260   2          // the transfer.  Bust out of the polling loop so we dont hang
 261   2          // here forever.
 262   2          if (!modeIsMaster && useNss)
 263   2          {
 264   3            // wait for nss to be asserted the first time before we
 265   3            // start checking it
 266   3            if (!checkNss)
 267   3            {
 268   4              if ((SPI0CFG & SPI0CFG_SLVSEL__BMASK))
 269   4              {
 270   5                checkNss = true;
 271   5              }
 272   4            }
 273   3            else
 274   3            {
 275   4              if (!(SPI0CFG & SPI0CFG_SLVSEL__BMASK))
 276   4              {
 277   5                break;
 278   5              }
 279   4            }
 280   3          }
 281   2        }
 282   1      
 283   1        // Transfer is done.  Deassert NSS (if used)
 284   1        if (modeIsMaster && useNss)
 285   1        {
 286   2          SPI0CN0_NSSMD0 = 1;
 287   2        }
 288   1      
 289   1        RESTORE_PAGE();
 290   1        return xferCount;
 291   1      }
 292          
 293          // ----------------------------------------------------------------------------
 294          // Check if SPI is busy with a transfer in progress.
 295          // ----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 6   

 296          bool SPI0_isBusy(void)
 297          {
 298   1        uint8_t count = 0;
 299   1        bool ret = false;
 300   1        DECL_PAGE;
 301   1      
 302   1        SET_PAGE(SPI_SFR_PAGE);
 303   1      
 304   1        // the SPI busy bit can drop between bytes so you cant just poll
 305   1        // it to find out when all the bytes have been transferred.  Or sometimes
 306   1        // you will catch it not set, between bytes when it is really still
 307   1        // busy.  To make busy test useful, we need to know when it is done
 308   1        // with all bytes.  That is why there is a loop below.
 309   1      
 310   1        // Read it several times and if the bit is ever marked busy, then
 311   1        // return busy indication.
 312   1        for (count = 0; count < 3; count++)
 313   1        {
 314   2          if (SPI0CFG & SPI0CFG_SPIBSY__BMASK)
 315   2          {
 316   3            ret = true;
 317   3          }
 318   2        }
 319   1      
 320   1        // If it makes it through the loops above without find the busy bit
 321   1        // then it is not busy.
 322   1        RESTORE_PAGE();
 323   1        return ret;
 324   1      }
 325          
 326          #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
 327          // ----------------------------------------------------------------------------
 328          // Check if transmit buffer is full
 329          // ----------------------------------------------------------------------------
 330          bool SPI0_isTxFull(void)
 331          {
 332   1        bool ret;
 333   1        DECL_PAGE;
 334   1      
 335   1        SET_PAGE(SPI_SFR_PAGE);
 336   1        ret = !SPI0CN0_TXNF;
 337   1        RESTORE_PAGE();
 338   1        return ret;
 339   1      }
 340          
 341          // ----------------------------------------------------------------------------
 342          // Check if slave is selected
 343          // ----------------------------------------------------------------------------
 344          bool SPI0_isSlaveSelected(void)
 345          {
 346   1        bool ret;
 347   1        DECL_PAGE;
 348   1      
 349   1        SET_PAGE(SPI_SFR_PAGE);
 350   1        ret = SPI0CFG & SPI0CFG_SLVSEL__BMASK;
 351   1        RESTORE_PAGE();
 352   1        return ret;
 353   1      }
 354          
 355          // ----------------------------------------------------------------------------
 356          // Check if shift register is empty
 357          // ----------------------------------------------------------------------------
 358          bool SPI0_isShiftEmpty(void)
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 7   

 359          {
 360   1        bool ret;
 361   1        DECL_PAGE;
 362   1      
 363   1        SET_PAGE(SPI_SFR_PAGE);
 364   1        ret = SPI0CFG & SPI0CFG_SRMT__BMASK;
 365   1        RESTORE_PAGE();
 366   1        return ret;
 367   1      }
 368          
 369          // ----------------------------------------------------------------------------
 370          // Check if receive buffer is empty
 371          // ----------------------------------------------------------------------------
 372          bool SPI0_isRxEmpty(void)
 373          {
 374   1        bool ret;
 375   1        DECL_PAGE;
 376   1      
 377   1        SET_PAGE(SPI_SFR_PAGE);
 378   1        ret = SPI0CFG & SPI0CFG_RXE__BMASK;
 379   1        RESTORE_PAGE();
 380   1        return ret;
 381   1      }
 382          #endif
 383          
 384          // ----------------------------------------------------------------------------
 385          // Initialize the SPI peripheral operating parameters
 386          // ----------------------------------------------------------------------------
 387          void SPI0_init(SPI0_ClockMode_t clockMode, bool isMasterMode, bool is4wire)
 388          {
 389   1        DECL_PAGE;
 390   1      
 391   1        SET_PAGE(SPI_SFR_PAGE);
 392   1      
 393   1        // Figure out if this driver controls NSS signal (chip select)
 394   1        modeIsMaster = isMasterMode;
 395   1        useNss = is4wire;
 396   1        initIsValid = true;
 397   1      
 398   1        // disable SPI before configuring
 399   1        SPI0CN0_SPIEN = 0;
 400   1      
 401   1        // Set up the clock mode (phase and polarity), and the
 402   1        // master/slave selection
 403   1        SPI0CFG = clockMode | (isMasterMode ? SPI0CFG_MSTEN__MASTER_ENABLED
 404   1                                            : SPI0CFG_MSTEN__MASTER_DISABLED);
 405   1      
 406   1        // Set up the NSS mode bits depending on whether 3-wire or 4-wire
 407   1        // is used, and whether master or slave mode
 408   1        if (is4wire)
 409   1        {
 410   2          SPI0CN0_NSSMD0 = 1;
 411   2          SPI0CN0_NSSMD1 = isMasterMode ? 1 : 0;
 412   2        }
 413   1        else
 414   1        {
 415   2          SPI0CN0_NSSMD0 = 0;
 416   2          SPI0CN0_NSSMD1 = 0;
 417   2        }
 418   1      
 419   1        // clear all the interrupt bits and enable the SPI
 420   1        SPI0CN0 &= ~0xF0;
 421   1        SPI0CN0_SPIEN = 1;
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 8   

 422   1      
 423   1        RESTORE_PAGE();
 424   1      }
 425          
 426          // ----------------------------------------------------------------------------
 427          // Set the clock divider used to determine SPI clock rate
 428          // ----------------------------------------------------------------------------
 429          void SPI0_setClockDivider(uint16_t divider)
 430          {
 431   1        DECL_PAGE;
 432   1      
 433   1        // constrain input in case user passes a bad value
 434   1        if (divider > 512)
 435   1        {
 436   2          divider = 512;
 437   2        }
 438   1        if (divider < 2)
 439   1        {
 440   2          divider = 2;
 441   2        }
 442   1        // make even value
 443   1        divider &= ~1;
 444   1      
 445   1        // Transform the divider to the form needed by SFR.
 446   1        // See equation in the data sheet for more information
 447   1        divider /= 2;
 448   1        divider -= 1;
 449   1      
 450   1        // disable SPI before configuring, then update the value
 451   1        SET_PAGE(SPI_SFR_PAGE);
 452   1        SPI0CN0_SPIEN = 0;
 453   1        SPI0CKR = (uint8_t)divider;
 454   1        SPI0CN0_SPIEN = 1;
 455   1        RESTORE_PAGE();
 456   1      }
 457          
 458          #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
 459          // ----------------------------------------------------------------------------
 460          // Reset SPI to disabled state.
 461          // ----------------------------------------------------------------------------
 462          void SPI0_reset(void)
 463          {
 464   1        DECL_PAGE;
 465   1      
 466   1        SET_PAGE(SPI_SFR_PAGE);
 467   1        SPI0CN0 &= 0x0E;
 468   1        IE_ESPI0 = 0;
 469   1        RESTORE_PAGE();
 470   1      }
 471          #endif
 472          
 473          // ----------------------------------------------------------------------------
 474          // Read status of TFRQ
 475          // ----------------------------------------------------------------------------
 476          bool SPI0_isFifoTxReq(void)
 477          {
 478   1        bool ret = false;
 479   1        uint8_t savedPage = SFRPAGE;
 480   1        SFRPAGE = SPI_SFR_PAGE;
 481   1        if (SPI0FCN1 & SPI0FCN1_TFRQ__BMASK)
 482   1        {
 483   2          ret = true;
 484   2        }
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 9   

 485   1        SFRPAGE = savedPage;
 486   1        return ret;
 487   1      }
 488          
 489          // ----------------------------------------------------------------------------
 490          // Read status of RFRQ
 491          // ----------------------------------------------------------------------------
 492          bool SPI0_isFifoRxReq(void)
 493          {
 494   1        bool ret = false;
 495   1        uint8_t savedPage = SFRPAGE;
 496   1        SFRPAGE = SPI_SFR_PAGE;
 497   1        if (SPI0FCN1 & SPI0FCN1_RFRQ__BMASK)
 498   1        {
 499   2          ret = true;
 500   2        }
 501   1        SFRPAGE = savedPage;
 502   1        return ret;
 503   1      }
 504          
 505          // ----------------------------------------------------------------------------
 506          // Get count of bytes in RX fifo
 507          // ----------------------------------------------------------------------------
 508          uint8_t SPI0_getRxFifoCount(void)
 509          {
 510   1        uint8_t ret;
 511   1        DECL_PAGE;
 512   1      
 513   1        SET_PAGE(SPI_SFR_PAGE);
 514   1        ret = SPI0FCT & SPI0FCT_RXCNT__FMASK;
 515   1      
 516   1        RESTORE_PAGE();
 517   1        return ret;
 518   1      }
 519          
 520          // ----------------------------------------------------------------------------
 521          // Get count of bytes in TX fifo
 522          // ----------------------------------------------------------------------------
 523          uint8_t SPI0_getTxFifoCount(void)
 524          {
 525   1        uint8_t ret;
 526   1        DECL_PAGE;
 527   1      
 528   1        SET_PAGE(SPI_SFR_PAGE);
 529   1        ret = (SPI0FCT & SPI0FCT_TXCNT__FMASK) >> SPI0FCT_TXCNT__SHIFT;
 530   1      
 531   1        RESTORE_PAGE();
 532   1        return ret;
 533   1      }
 534          
 535          // ----------------------------------------------------------------------------
 536          // Configure the FIFO operation
 537          // ----------------------------------------------------------------------------
 538          void SPI0_configureFifo(uint8_t txThreshold, uint8_t rxThreshold,
 539                                  uint8_t rxTimeout)
 540          {
 541   1        uint8_t fifoCtrl;
 542   1        DECL_PAGE;
 543   1      
 544   1        SET_PAGE(SPI_SFR_PAGE);
 545   1      
 546   1        // Set the TX and RX threshold fields
 547   1        fifoCtrl = SPI0FCN0;
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 10  

 548   1        fifoCtrl &= ~(SPI0FCN0_TXTH__FMASK | SPI0FCN0_RXTH__FMASK);
 549   1        fifoCtrl |= ((txThreshold & 3) << SPI0FCN0_TXTH__SHIFT)
 550   1                  | ((rxThreshold & 3) << SPI0FCN0_RXTH__SHIFT);
 551   1      
 552   1        // Only change the RX timeout if in slave mode
 553   1        if (!(SPI0CFG & SPI0CFG_MSTEN__BMASK))
 554   1        {
 555   2          // If non-zero then enable the rx timeout bit, and set the
 556   2          // timeout count
 557   2          if (rxTimeout)
 558   2          {
 559   3            fifoCtrl |= SPI0FCN1_RXTOE__ENABLED;
 560   3            SPI0CKR = rxTimeout;
 561   3          }
 562   2      
 563   2          // Else rxTimeout is 0, so disable the timeout bit
 564   2          else
 565   2          {
 566   3            fifoCtrl &= ~SPI0FCN1_RXTOE__ENABLED;
 567   3          }
 568   2        }
 569   1        SPI0FCN0 = fifoCtrl;
 570   1        RESTORE_PAGE();
 571   1      }
 572          
 573          #if EFM8PDL_SPI0_USE_BUFFER == 1
 574          
 575          // flag to indicate that RX buffer should be used for buffered transfers
 576          static bool useRx = false;
 577          
 578          // flag to indicate that TX buffer should be used for buffered transfers
 579          static bool useTx = false;
 580          
 581          static uint8_t rxCountRemaining = 0;
 582          static uint8_t txCountRemaining = 0;
 583          static uint8_t bytesRemaining = 0;
 584          static SI_VARIABLE_SEGMENT_POINTER(pTxBuf, uint8_t, EFM8PDL_SPI0_TX_SEGTYPE) = NULL;
 585          static SI_VARIABLE_SEGMENT_POINTER(pRxBuf, uint8_t, EFM8PDL_SPI0_RX_SEGTYPE) = NULL;
 586          
 587          // ----------------------------------------------------------------------------
 588          // Set up an interrupt driven SPI transfer.
 589          // ----------------------------------------------------------------------------
 590          void
 591          SPI0_transfer(SI_VARIABLE_SEGMENT_POINTER(pTxBuffer, uint8_t,
 592                                                    EFM8PDL_SPI0_TX_SEGTYPE),
 593                        SI_VARIABLE_SEGMENT_POINTER(pRxBuffer, uint8_t,
 594                                                    EFM8PDL_SPI0_RX_SEGTYPE),
 595                        SPI0_TransferDirection_t dir,
 596                        uint8_t xferCount)
 597          {
 598   1        DECL_PAGE;
 599   1      
 600   1        rxCountRemaining = xferCount;
 601   1        txCountRemaining = xferCount;
 602   1        bytesRemaining = xferCount;
 603   1        pTxBuf = pTxBuffer;
 604   1        pRxBuf = pRxBuffer;
 605   1        useRx = dir & SPI0_TRANSFER_RX;
 606   1        useTx = dir & SPI0_TRANSFER_TX;
 607   1      
 608   1        SET_PAGE(SPI_SFR_PAGE);
 609   1      
 610   1        // Check to see if run-time mode variables have been set up
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 11  

 611   1        if (!initIsValid)
 612   1        {
 613   2          SPI0_internalInit();
 614   2        }
 615   1      
 616   1        // Flush the RX buffer in case something is in there
 617   1      #if (EFM8PDL_SPI0_AUTO_PAGE == 1)
 618   1        {
 619   2          // if auto page is enabled then we dont need to change pages here
 620   2          SPI0FCN0 |= SPI0FCN0_RFLSH__FLUSH;
 621   2        }
 622   1      #else
                {
                  // if auto page is not enabled, then we need to change pages for
                  // this section of code
                  uint8_t savedPage = SFRPAGE;
                  SFRPAGE = SPI_SFR_PAGE;
                  SPI0FCN0 |= SPI0FCN0_RFLSH__FLUSH;
                  SFRPAGE = savedPage;
                }
              #endif
 632   1      
 633   1        // Clear all the interrupt flags
 634   1        SPI0CN0 &= ~0xF0;
 635   1      
 636   1        // Set up the interrupt to use the FIFO request levels instead of SPIF
 637   1        SPI0FCN1 &= ~SPI0FCN1_SPIFEN__BMASK;
 638   1        SPI0FCN0 |= SPI0FCN0_RFRQE__ENABLED;
 639   1      
 640   1        // assert NSS (if used)
 641   1        if (modeIsMaster && useNss)
 642   1        {
 643   2          SPI0CN0_NSSMD0 = 0;
 644   2        }
 645   1      
 646   1      #if EFM8PDL_SPI0_USE_PIPELINE == 0
 647   1        // Write the first byte to get the transfer started
 648   1        if (SPI0CN0_TXNF && txCountRemaining)
 649   1        {
 650   2          // If user provided tx data, then use that
 651   2          if (useTx)
 652   2          {
 653   3            SPI0DAT = *pTxBuf;
 654   3            ++pTxBuf;
 655   3          }
 656   2      
 657   2          // Otherwise no tx data, so just stuff zeroes
 658   2          else
 659   2          {
 660   3            SPI0DAT = 0;
 661   3          }
 662   2          --txCountRemaining;
 663   2        }
 664   1      #else
                // Stuff as many bytes as we can in the tx buffer to start.
                while (SPI0CN0_TXNF && txCountRemaining)
                {
                  // If user provided tx data, then use that
                  if (useTx)
                  {
                    SPI0DAT = *pTxBuf;
                    ++pTxBuf;
                  }
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 12  

              
                  // Otherwise no tx data, so just stuff zeroes
                  else
                  {
                    SPI0DAT = 0;
                  }
                  --txCountRemaining;
                }
              #endif
 683   1      
 684   1        RESTORE_PAGE();
 685   1        // At this point SPI should be running and the rest will be handled
 686   1        // in the interrupt service routine
 687   1      }
 688          
 689          // ----------------------------------------------------------------------------
 690          // Stop a running SPI transfer.
 691          // ----------------------------------------------------------------------------
 692          void SPI0_abortTransfer(void)
 693          {
 694   1        DECL_PAGE;
 695   1      
 696   1        // Resetting the counters will cause the ISR to ignore any remaining
 697   1        // SPI interrupts.
 698   1        txCountRemaining = 0;
 699   1        rxCountRemaining = 0;
 700   1        useTx = false;
 701   1        useRx = false;
 702   1        pTxBuf = NULL;
 703   1        pRxBuf = NULL;
 704   1      
 705   1        SET_PAGE(SPI_SFR_PAGE);
 706   1      
 707   1        // drop the chip select if used
 708   1        if (modeIsMaster && useNss)
 709   1        {
 710   2          SPI0CN0_NSSMD0 = 1;
 711   2        }
 712   1      
 713   1        // Flush buffers
 714   1        SPI0CN0_SPIEN = 0;
 715   1        SPI0FCN0 |= SPI0FCN0_RFLSH__FLUSH | SPI0FCN0_TFLSH__FLUSH;
 716   1        SPI0CN0_SPIEN = 1;
 717   1      
 718   1        RESTORE_PAGE();
 719   1      }
 720          
 721          // ----------------------------------------------------------------------------
 722          // Get the number of bytes remaining in the transfer.  This will really
 723          // be the number of RX bytes.
 724          // ----------------------------------------------------------------------------
 725          uint8_t SPI0_bytesRemaining(void)
 726          {
 727   1        return bytesRemaining;
 728   1      }
 729          
 730          // ----------------------------------------------------------------------------
 731          // Handler for interrupt driven SPI data transfers.
 732          // ----------------------------------------------------------------------------
 733          SI_INTERRUPT(SPI0_ISR, SPI0_IRQn)
 734          {
 735   1        uint8_t intFlags;
 736   1        uint8_t fifoFlags;
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 13  

 737   1      
 738   1        // This device has SFRPAGE autosave so we can change page here and
 739   1        // it will automatically be restored when interrupt exits
 740   1        SFRPAGE = SPI_SFR_PAGE;
 741   1      
 742   1        // Get the interrupt flags and then clear any that are pending
 743   1        intFlags = SPI0CN0 & 0xF0;
 744   1        SPI0CN0 = (SPI0CN0 & (~intFlags | 0x0F));
 745   1        // we are not using the normal interrupt flags for anything
 746   1        // in this ISR
 747   1      
 748   1        // Get the FIFO request flags
 749   1        fifoFlags = SPI0FCN1;
 750   1      
 751   1        // If either FIFO request flag is set, it means that there is
 752   1        // either more data to read or write, or both.  So just try
 753   1        // to read and write as much as we can at this time.
 754   1        if (fifoFlags & SPI0FCN1_RFRQ__BMASK)
 755   1        {
 756   2          // Read bytes as long as the read count is non-zero and there
 757   2          // are more bytes in the RX buffer
 758   2      #if EFM8PDL_SPI0_USE_PIPELINE == 1
                  while (rxCountRemaining && !(SPI0CFG & SPI0CFG_RXE__BMASK))
              #else
 761   2          if (rxCountRemaining && !(SPI0CFG & SPI0CFG_RXE__BMASK))
 762   2      #endif
 763   2          {
 764   3            // If the user provided an RX buffer then read a byte into that.
 765   3            if (useRx)
 766   3            {
 767   4              *pRxBuf = SPI0DAT;
 768   4              ++pRxBuf;
 769   4            }
 770   3      
 771   3            // Else, user does not care about RX data so do a dummy read.
 772   3            else
 773   3            {
 774   4              uint8_t dummy = SPI0DAT;
 775   4            }
 776   3            --rxCountRemaining;
 777   3      
 778   3            // If we get to zero remaining, it means that all the
 779   3            // bytes have been transferred.
 780   3            if (rxCountRemaining == 0)
 781   3            {
 782   4              // deassert NSS (if used)
 783   4              if (modeIsMaster && useNss)
 784   4              {
 785   5                SPI0CN0_NSSMD0 = 1;
 786   5              }
 787   4              // Tell user that the transfer is complete.
 788   4              SPI0_transferCompleteCb();
 789   4            }
 790   3      
 791   3            // If there are more RX bytes to receive, then remember the
 792   3            // current count to be used by _bytesRemaining()
 793   3            else
 794   3            {
 795   4              bytesRemaining = rxCountRemaining;
 796   4            }
 797   3          }
 798   2      
 799   2          // Write bytes if there are more TX bytes to send and the
C51 COMPILER V9.53.0.0   SPI_0                                                             05/08/2017 21:56:41 PAGE 14  

 800   2          // TX buffer is not full
 801   2      #if EFM8PDL_SPI0_USE_PIPELINE == 1
                  while (txCountRemaining && SPI0CN0_TXNF)
              #else
 804   2          if (txCountRemaining && SPI0CN0_TXNF)
 805   2      #endif
 806   2          {
 807   3            // If user provided a TX buffer then write the next byte
 808   3            if (useTx)
 809   3            {
 810   4              SPI0DAT = *pTxBuf;
 811   4              ++pTxBuf;
 812   4            }
 813   3      
 814   3            // Otherwise user did not provide a buffer so just write a zero.
 815   3            else
 816   3            {
 817   4              SPI0DAT = 0;
 818   4            }
 819   3            --txCountRemaining;
 820   3          }
 821   2        }
 822   1      
 823   1      #if EFM8PDL_SPI0_USE_ERR_CALLBACK == 1
                // Check for errors and notify user
                if (intFlags & (SPI0_MODF_IF | SPI0_RXOVR_IF))
                {
                  // Note, the RXOVRN bit only happens in slave mode, and the MODF
                  // bit is not very likely, so in master mode this block will
                  // probably not ever be used.
                  SPI0_transferErrorCb(intFlags & (SPI0_MODF_IF | SPI0_RXOVR_IF));
                }
              #endif // EFM8PDL_SPI0_USE_ERR_CALLBACK
 833   1      }
 834          
 835          #endif // EFM8PDL_SPI0_USE_BUFFER
 836          
 837          /** @} (end spi_0_group) */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    824    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5      11
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
