C51 COMPILER V9.53.0.0   SPI                                                               05/08/2017 21:56:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\lib\efm8bb3\bsp\efm8_memory_lcd\src\source\spi.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\Device\EFM8BB3\bsp\efm8_memory_lcd\source\spi.c OMF2 SMALL DEBUG OBJECTEXT
                    -END ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Us
                    -ers\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\graphics;C:\Users\student\SimplicityStudio\v4_workspace\
                    -EFM8BB3_Voltmeter\inc;C:\Users\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\config;C:/SiliconLabs/Simplic
                    -ityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//
                    -kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_
                    -driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStud
                    -io/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/de
                    -veloper/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sd
                    -ks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/i
                    -nc) PRINT(.\lib\efm8bb3\bsp\efm8_memory_lcd\src\source\spi.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\efm8bb3\
                    -bsp\efm8_memory_lcd\src\source\spi.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          /////////////////////////////////////////////////////////////////////////////
   7          // Spi.c
   8          /////////////////////////////////////////////////////////////////////////////
   9          
  10          // SPI FIFO Format
  11          // ---------------
  12          //
  13          // All SPI transfers are pushed to the TX FIFO with the transfer size in
  14          // bytes followed by the data to transmit.
  15          
  16          /////////////////////////////////////////////////////////////////////////////
  17          // Includes
  18          /////////////////////////////////////////////////////////////////////////////
  19          
  20          #include "bsp.h"
  21          #include "spi.h"
  22          #include "spi_0.h"
  23          #include <string.h>
  24          
  25          /////////////////////////////////////////////////////////////////////////////
  26          // Globals
  27          /////////////////////////////////////////////////////////////////////////////
  28          
  29          static SI_SEGMENT_VARIABLE(TxBuffer[SPI_BUF_SIZE], uint8_t, EFM8PDL_SPI0_TX_SEGTYPE);
  30          
  31          static volatile uint8_t TransferState = ST_IDLE;
  32          static volatile uint8_t TransferSize = 0;
  33          
  34          /////////////////////////////////////////////////////////////////////////////
  35          // Functions
  36          /////////////////////////////////////////////////////////////////////////////
  37          
  38          void SPI_StartTransfer(SI_VARIABLE_SEGMENT_POINTER(buffer, uint8_t, SI_SEG_GENERIC), uint8_t size)
  39          {
  40   1        uint8_t sfrPageSave;
  41   1        uint8_t i;
  42   1      
  43   1        // Wait for previous transfer to complete
C51 COMPILER V9.53.0.0   SPI                                                               05/08/2017 21:56:41 PAGE 2   

  44   1        while (TransferState != ST_IDLE);
  45   1      
  46   1        // Start new transfer
  47   1        TransferState = ST_CS_SETUP;
  48   1        TransferSize = size;
  49   1      
  50   1        for (i = 0; i < size; i++)
  51   1        {
  52   2          TxBuffer[i] = buffer[i];
  53   2        }
  54   1      
  55   1        sfrPageSave = SFRPAGE;
  56   1        SFRPAGE = LEGACY_PAGE;
  57   1      
  58   1        // CS setup time
  59   1        // Timer 2 overflows at end of setup time
  60   1        TMR2 = (uint16_t)-(DELAY_TIMER_FREQ / 1000000 * SPI_CS_SETUP_US);
  61   1        BSP_DISP_CS = SPI_CS_ASSERT_LVL;
  62   1        TMR2CN0 |= TMR2CN0_TR2__BMASK;
  63   1      
  64   1        SFRPAGE = sfrPageSave;
  65   1      }
  66          
  67          /////////////////////////////////////////////////////////////////////////////
  68          // Interrupt Service Handlers
  69          /////////////////////////////////////////////////////////////////////////////
  70          
  71          void SPI0_transferCompleteCb(void)
  72          {
  73   1        uint8_t sfrPageSave;
  74   1      
  75   1        // CS hold time
  76   1        TransferState = ST_CS_HOLD;
  77   1      
  78   1        sfrPageSave = SFRPAGE;
  79   1        SFRPAGE = LEGACY_PAGE;
  80   1      
  81   1        // CS hold time
  82   1        // Timer 2 overflows at end of hold time
  83   1        TMR2 = (uint16_t)-(DELAY_TIMER_FREQ / 1000000 * SPI_CS_HOLD_US);
  84   1        TMR2CN0 |= TMR2CN0_TR2__BMASK;
  85   1      
  86   1        SFRPAGE = sfrPageSave;
  87   1      }
  88          
  89          //-----------------------------------------------------------------------------
  90          // TIMER2_ISR
  91          //-----------------------------------------------------------------------------
  92          //
  93          // TIMER2 ISR Content goes here. Remember to clear flag bits:
  94          // TMR2CN::TF2H (Timer # High Byte Overflow Flag)
  95          // TMR2CN::TF2L (Timer # Low Byte Overflow Flag)
  96          //
  97          //-----------------------------------------------------------------------------
  98          SI_INTERRUPT (TIMER2_ISR, TIMER2_IRQn)
  99          {
 100   1        TMR2CN0 &= ~TMR2CN0_TF2H__BMASK;
 101   1      
 102   1        // Stop timer
 103   1        TMR2CN0 &= ~TMR2CN0_TR2__BMASK;
 104   1      
 105   1        // CS setup complete
 106   1        if (TransferState == ST_CS_SETUP)
C51 COMPILER V9.53.0.0   SPI                                                               05/08/2017 21:56:41 PAGE 3   

 107   1        {
 108   2          TransferState = ST_TX;
 109   2          SPI0_transfer(TxBuffer, NULL, SPI0_TRANSFER_TX, TransferSize);
 110   2        }
 111   1        // CS hold complete
 112   1        else if (TransferState == ST_CS_HOLD)
 113   1        {
 114   2          // Deassert CS
 115   2          BSP_DISP_CS = SPI_CS_DEASSERT_LVL;
 116   2      
 117   2          // Transfer complete
 118   2          TransferState = ST_IDLE;
 119   2        }
 120   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    183    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     20    ----
   DATA SIZE        =      2       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
