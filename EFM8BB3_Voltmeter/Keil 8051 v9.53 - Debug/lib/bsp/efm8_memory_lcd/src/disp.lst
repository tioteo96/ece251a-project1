C51 COMPILER V9.53.0.0   DISP                                                              05/08/2017 21:56:42 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DISP
OBJECT MODULE PLACED IN .\lib\bsp\efm8_memory_lcd\src\disp.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\SiliconLabs\S
                    -implicityStudio\v4\developer\sdks\8051\v4.0.3\kits\common\drivers\efm8_memory_lcd\src\disp.c OMF2 SMALL DEBUG OBJECTEXTE
                    -ND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Use
                    -rs\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\graphics;C:\Users\student\SimplicityStudio\v4_workspace\E
                    -FM8BB3_Voltmeter\inc;C:\Users\student\SimplicityStudio\v4_workspace\EFM8BB3_Voltmeter\inc\config;C:/SiliconLabs/Simplici
                    -tyStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//k
                    -its/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/peripheral_d
                    -river/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_joystick;C:/SiliconLab
                    -s/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudi
                    -o/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/dev
                    -eloper/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/in
                    -c) PRINT(.\lib\bsp\efm8_memory_lcd\src\disp.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\lib\bsp\efm8_memory_lcd\src
                    -\disp.OBJ)

line level    source

   1          /////////////////////////////////////////////////////////////////////////////
   2          // disp.c
   3          /////////////////////////////////////////////////////////////////////////////
   4          
   5          #include "bsp.h"
   6          #include "utils.h"
   7          #include "spi.h"
   8          #include "tick.h"
   9          #include "disp.h"
  10          #include <string.h>
  11          
  12          ////////////////////////////////////////////////////////////////////////
  13          // Display driver for Sharp LS013B7DH03 128x128 monochrome memory LCD //
  14          ////////////////////////////////////////////////////////////////////////
  15          
  16          /////////////////////////////////////////////////////////////////////////////
  17          // Globals
  18          /////////////////////////////////////////////////////////////////////////////
  19          
  20          uint16_t LastVcomToggle = 0;
  21          
  22          /////////////////////////////////////////////////////////////////////////////
  23          // Static Function Prototypes
  24          /////////////////////////////////////////////////////////////////////////////
  25          
  26          uint8_t BitReverse(uint8_t input);
  27          uint8_t SoftwareVcomToggle(uint8_t cmd);
  28          
  29          /////////////////////////////////////////////////////////////////////////////
  30          // Function
  31          /////////////////////////////////////////////////////////////////////////////
  32          
  33          /***************************************************************************//**
  34           * @brief Reverse the bit-endianess in a byte (bit 0 => bit 7, bit 1 => bit 6, etc)
  35           *
  36           * @param input A byte to reverse
  37           * @return The reversed byte
  38           *
  39           *****************************************************************************/
  40          uint8_t BitReverse(uint8_t input)
  41          {
  42   1          uint8_t output = input;
  43   1      
C51 COMPILER V9.53.0.0   DISP                                                              05/08/2017 21:56:42 PAGE 2   

  44   1          output = (output & 0xF0) >> 4 | (output & 0x0F) << 4;
  45   1          output = (output & 0xCC) >> 2 | (output & 0x33) << 2;
  46   1          output = (output & 0xAA) >> 1 | (output & 0x55) << 1;
  47   1      
  48   1          return output;
  49   1      }
  50          
  51          /***************************************************************************//**
  52           * @brief Toggle the software VCOM command bit at 5 Hz
  53           * @param cmd The display SPI command byte
  54           * @return The display SPI command byte with M1 toggled at 5 Hz
  55           *
  56           *****************************************************************************/
  57          uint8_t SoftwareVcomToggle(uint8_t cmd)
  58          {
  59   1          uint16_t tick = GetTickCount();
  60   1      
  61   1          if (tick - LastVcomToggle > HZ_TO_MS(DISP_VCOM_TOGGLE_RATE_HZ))
  62   1          {
  63   2              // Pulse software VCOM
  64   2              cmd |= DISP_CMD_VCOM_MASK;
  65   2      
  66   2              LastVcomToggle = tick;
  67   2          }
  68   1      
  69   1          return cmd;
  70   1      }
  71          
  72          /***************************************************************************//**
  73           * @brief Initializes the display driver and clears the display
  74           *
  75           *****************************************************************************/
  76          void DISP_Init()
  77          {
  78   1          BSP_DISP_CS = SPI_CS_DEASSERT_LVL;
  79   1          BSP_DISP_EN = DISP_EN_EFM8;
  80   1      
  81   1          Wait(10);
  82   1      
  83   1          DISP_ClearAll();
  84   1      }
  85          
  86          /***************************************************************************//**
  87           * @brief Clear the display to the background color
  88           *
  89           *****************************************************************************/
  90          void DISP_ClearAll()
  91          {
  92   1      #if DISP_BACKGROUND_COLOR == COLOR_WHITE
                  uint8_t tx[2];
              
                  tx[0] = SoftwareVcomToggle(DISP_CMD_CLEAR_ALL);
                  tx[1] = DISP_CMD_DUMMY;
              
                  SPI_StartTransfer(tx, sizeof(tx));
              #else
 100   1          uint8_t i;
 101   1      
 102   1          for (i = 0; i < DISP_HEIGHT; i++)
 103   1          {
 104   2              DISP_ClearLine(i, COLOR_BLACK);
 105   2          }
 106   1      #endif
C51 COMPILER V9.53.0.0   DISP                                                              05/08/2017 21:56:42 PAGE 3   

 107   1      }
 108          
 109          /***************************************************************************//**
 110           * @brief Clear a single line
 111           *
 112           * @param row line to write (0 = top line; 127 = bottom line)
 113           * @param bw line color after clearing (0x00 = black; 0xFF = white)
 114           *
 115           *****************************************************************************/
 116          void DISP_ClearLine(uint8_t row, uint8_t bw)
 117          {
 118   1          uint8_t i;
 119   1          uint8_t cmd[DISP_BUF_SIZE + 4];
 120   1      
 121   1          if (bw)
 122   1          {
 123   2              bw = COLOR_WHITE;
 124   2          }
 125   1          else
 126   1          {
 127   2              bw = COLOR_BLACK;
 128   2          }
 129   1      
 130   1          // Send write command and line address
 131   1          cmd[0] = SoftwareVcomToggle(DISP_CMD_DYNAMIC_MODE);
 132   1          cmd[1] = BitReverse(row+1);
 133   1      
 134   1          // Send line data
 135   1          for (i = 0; i < DISP_BUF_SIZE; i++)
 136   1          {
 137   2            cmd[2 + i] = bw;
 138   2          }
 139   1      
 140   1          // Send dummy data
 141   1          cmd[DISP_BUF_SIZE + 2] = DISP_CMD_DUMMY;
 142   1          cmd[DISP_BUF_SIZE + 3] = DISP_CMD_DUMMY;
 143   1      
 144   1          // Send command
 145   1          SPI_StartTransfer(cmd, DISP_BUF_SIZE + 4);
 146   1      }
 147          
 148          /***************************************************************************//**
 149           * @brief Write a single line to the display
 150           *
 151           * @param row line to write (0 = top line; 127 = bottom line)
 152           * @param line pixel values
 153           *             (line[0] MSB = left-most pixel; line[15] LSB = right-most pixel)
 154           *             (set bit to '0' to turn pixel "on" (black))
 155           *
 156           *****************************************************************************/
 157          void DISP_WriteLine(uint8_t row, SI_SEGMENT_VARIABLE(line[DISP_BUF_SIZE], uint8_t, SI_SEG_GENERIC))
 158          {
 159   1          uint8_t i;
 160   1          uint8_t cmd[DISP_BUF_SIZE + 4];
 161   1      
 162   1          // Send write command and line address
 163   1          cmd[0] = SoftwareVcomToggle(DISP_CMD_DYNAMIC_MODE);
 164   1          cmd[1] = BitReverse(row+1);
 165   1      
 166   1          for (i = 0; i < DISP_BUF_SIZE; i++)
 167   1          {
 168   2            cmd[i+2] = line[i];
 169   2          }
C51 COMPILER V9.53.0.0   DISP                                                              05/08/2017 21:56:42 PAGE 4   

 170   1      
 171   1          // Send dummy data
 172   1          cmd[DISP_BUF_SIZE + 2] = DISP_CMD_DUMMY;
 173   1          cmd[DISP_BUF_SIZE + 3] = DISP_CMD_DUMMY;
 174   1      
 175   1          // Send command
 176   1          SPI_StartTransfer(cmd, DISP_BUF_SIZE + 4);
 177   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    236    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      48
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
